（待补充完善）GAN对抗生成网络（Generative Adversarial Net)

1、
----------------------------------------------------------
一文读懂GAN, pix2pix, CycleGAN和pix2pixHD
https://blog.csdn.net/gdymind/article/details/82696481
----------------------------------------------------------

	GAN中包含两种类型的网络G和D。
		G为Generator，它的作用是生成图片，也就是说，在输入一个随机编码（random code）z之后，它将输出一幅由神经网络自动生成的、假的图片G(z)。

		D为Discriminator，是用来判断的，它接受G输出的图像作为输入，然后判断这幅图像的真假，真的输出1，假的输出0。

		在TradeOff博弈过程中给，两个网络的能力都越来越高：
			G生成的图片越来越像真的图片，D也越来越会判断图片的真假。
				
				目的：丢掉D不要了，把G拿来用作图片生成器。

			目标函数：学习目标：最小峰值：
				min max E[logD(G(z)) + log(1-D(x))]
				 G 	 D

				为了增强D的能力，我们分别考虑输入真的图像和假的图像的情况。上式中第一项的D(G(z))处理的是假图像G(z)，这时候评分D(G(z))需要尽力降低；第二项处理的是真图像x，这时候的评分要高。

		传统GAN的局限性：
			（1、没有··用户控制 user control··的能力。   比如对形态输出控制。
					传统GAN输入的是一个随机噪声。输出随机图像。希望加一些约束条件。
			（2、低分辨率和低质量的问题。

		如何改善：
			目标：
				1）提高用户控制
				2）提高质量分辨率

					（1）pix2pix:有条件的使用用户输入：***成对的数据（paired data）***进行训练。
					（2）CycleGAN:使用***不成对的数据（unpaired data）***就能训练
					（3）pix2pixHD：生成***高分辨率、高质量***图像

			（1）pix2pix:
					不再输入随机噪声，而是输入用户给的图片。
				
				改进：G的输入和输出一起作为D的输入

				此时的目标函数：
					min max E[logD(x,G(x)) + log(1-D(x,y))]
					 G   D  
					x是Input image, G(x)是生成图像共同输入到D中

				··应用场景：
					1）草图变图片：
					2）灰度图变彩色图
					3）自动着色
					4）交互式着色
			（2）CycleGAN    **此处讲解Cycle-constraint Adversarial Network讲解的非常好。**
				pix2pix必须使用 **成对** 的数据进行训练。
					但是：成对数据是很难获取，比如马变成斑马。
				所以采用Cycle-constraint Adversarial Network
					我们希望 输入集合X 是（比如一群马的照片），
							 输出集合Y 是（比如一群斑马的照片）。
					但是不成对的数据不奏效，网络会直接忽略输入，随机产生输出。
						所以对网络增加 “*限制constraint*”

				如何加限制： “Cycle”
					我们希望把马变成斑马，然后再变回马，最后变回的马和开始输入的马应该是一样的。
					所以：====>除了之前用到的  “**马变斑马的网络G**”
								还需要  “**把斑马变回马**”的网络F.
							x_ ==> F(G(x))
						
							x =====> Y_ =====> x_		
								G    ||   F
								     ||
								     \/
								   Dy(G(x))

							   min ||F(G(x)) - x||
						反过来：从斑马变成马，再变回斑马也要满足要求，

							y_ ==> G(F(x))

							y =====> X_ =====> y_
									 ||
									 \/
									Dg(F(x))
								min ||G(F(y)) - y||
					同时优化G和F,最后得到一个想要的G

				为何CycleGAN 有效：
					因为它：分离了 **风格(style)和内容(content)**。
					自动保持内容而改变风格。

			应用实例：
				橘子变苹果：
					CycleGAN能够比较准确的找到橘子的位置，并把它变成苹果。
				失败的案例：
					普京骑马图：应该先用Mask R-CNN做图像分割之后再针对马进行变化。
			严重的问题：CycleGAN只能输出256p/512p的低分辨率图像。

			（3）pix2pixHD
				pix2pixHD就是来解决分辨率和图像质量问题的。让网络产生高维数据输出很难。

				pix2pixHD采取了金字塔式的方法：
					1、先输出低分辨率的图片。
					2、将之前输出的低分辨率图片作为另一个网络的输入，然后生成分辨率更高的图片。

				应用案例：
					1）用草图生成高分辨率人脸
					2）图像增强（Image Enhancement）
					3）图像去雾（Image Dehazing）
					4) 非监督动作重定向


初识GAN
----------------------------------------------------------
https://blog.csdn.net/Teeyohuang/article/details/82391022

----------------------------------------------------------



----------------------------------------------------------
深度学习与生成式模型
https://blog.csdn.net/Solomon1558/article/details/52512459
https://blog.csdn.net/solomon1558/article/list/2?t=1
----------------------------------------------------------
对抗生成网络（Generative Adversarial Net)
https://blog.csdn.net/stdcoutzyx/article/details/53151038
----------------------------------------------------------
生成式对抗网络GAN研究进展（二）——原始GAN
https://blog.csdn.net/solomon1558/article/details/52549409
----------------------------------------------------------
生成式对抗网络模型综述
https://blog.csdn.net/SIGAI_CSDN/article/details/80984973
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------







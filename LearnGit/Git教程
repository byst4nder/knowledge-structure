Git教程

1、安装配置：
	Linux上安装Git：centos上面yum install git。
	后续安装配置待查：
	
	windows上安装配置：
	https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fgit
	下载安装。在Git中找到Git Bash。

	配置用户信息：
		git config --global user.name “your name”
		git config --global user.email "email@example.com"

2、创建版本库：
	mkdir learngit
	cd learngit
	pwd
	
	git init   #可以把这个目录变成Git管理的仓库。

3、操作指南：
	文件放置到上一步中的路径下：
	
	#文件添加到仓库中。
	git add readme.txt

	不会有任何消息提示：没有消息就是最好的消息。

	#把文件提交到仓库
	git commit -m “wrote”

	注意：
		commit可以一次性提交多个文件。add一次只有一个，但是可以多次添加，然后一次提交。
		每次修改完，都要进行上一步的操作。先add 然后commit。一定要养成好的习惯，注意添加-m“”

4、版本管理：
	git status	 	   # 可以查看仓库状态。
	git diff 文件名    # 可以查看文件的改动事项。


	回退处理：
		git log 查看有哪些改动历史。
		git log --pretty=oneline	#单行显示。
			版本号是一串SHA1计算的数值。一般写前几个数字就够了。
		git reset --hard HEAD^
			HEAD:表示当前版本。
			HEAD^:表示上一个版本。HEAD^^表示上上一版本。。。。。HEAD~100。
		git log
		跳转某一个版本：git reset --hard 1094a(版本号)

	撤销回退版本：
		git reflog  :用来记录你的每一次命令
		git reset --hard :版本号


5、工作修改管理。

	工作区：工作路径，文件系统存放文件夹的位置。
	版本库：工作区中有一个.git的隐藏目录。属于版本库。
	暂存区：版本库中最重要的是stage（or index）暂存区。
	分支：master第一个分支。指向的指针叫HEAD。

	创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。

	添加文件分为两步：
		git add：添加进暂存区。把要提交的所有修改放到暂存区。
		git commit：将暂存区的所有内容添加到当前分支。
		git push origin master:将文件或者文件夹一起上传到远程服务器中。

	管理修改：
		为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。
		每次修改，如果不用git add到暂存区，那就不会加入到commit中。
		每次修改完，保存后，必须add到暂存区，才能提交成功。

	撤销修改：
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，
				分两步，第一步用命令 git reset HEAD <file>，就回到了场景1，
						第二步按场景1操作 git checkout -- file。

		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，git reset --hard XXXX 不过前提是没有推送到远程库。
				git reset --hard HEAD^
				git reset --hard commit_id

	删除文件：
		一、从版本库中删除文件，git rm /git commit -m "remove file". 通过git checkout -- test.txt恢复或者git reset --hard xxxx
		二、从文件系统删除文件。 git checkout -- test.txt恢复




6、远程仓库
	步骤：
	（1）配置秘钥登录
		在本地中ssh-keygen -t rsa -C "email"创建远程登录的SSH Key密钥对。将公钥id_rsa.pub内容添加到GitHub中/Account Settings/SSH Keys/Add SSH Key中。

	（2）GitHub中创建仓库。
		Create a new repo命名为：LearnGit

	（3）本地仓库与GitHub仓库关联
		git remote add origin git@github.com:wjay88/LearnGit.git
			远程库的名字就是 origin ，这是Git默认的叫法.

	（4）推送本地文件到远程库
		git push -u origin master
		第一次这样输入：以后就不需要了。只要这样：
		git push origin master

	（5）从远程库获取/克隆

		如果是远程库中先建立好仓库，本地拉取的话：
		git clone git@github.com:wjay88/LearnGit.git

	协议问题说明：
		Git支持多种协议：默认是git：//使用的ssh协议（快），也可以使用https协议（慢）。


	（6）git远程删除GitHub文件
			删除远程useless 文件夹,本地保留
			一定要注意，删除文件夹要使用-r 参数
			git rm --cached -r useless
			git commit -m "remove directory from remote repository"
			git push -u origin master：这条命令将本地文件刷新到服务器，相当于覆盖服务器版本。
	（7）查看 7 中的多人协作：
			git remote
			git remote -v

		登录到github上点开要下载的文件，进入文件的详细信息的页面：
			1、点击右上角的Raw
			2、进入到页面中，右击：网页另存为。

	
7、分支管理：
	Git 合并分支很快，就是改改指针，工作区内容也不变！将master指针指向了dev指针！
	HEAD指向也从dev移回到master

	git checkout -b dev:创建分支并切换
	等价于：
	git branch dev   	：创建分支
	git checkout dev	：切换分支


	git branch:查看当前分支,当前分支前面会有一个*

	git checkout master		:切换分支

	git merge dev	:将dev的分支合并到当前分支上。

	git branch -d dev 	：合并之后就可以删除dev分支了。

	总结：Git 鼓励大量使用分支:
		查看分支：git branch

		创建分支：git branch <name>

		切换分支：git checkout <name>

		创建+切换分支：git checkout -b <name>

		合并某分支到当前分支：git merge <name>

		删除分支：git branch -d <name>

	
	git log --graph --pretty=oneline --abbrev-commit	
		解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
	git branch -d feature1
		然后删除矛盾分支。


	在增加新的功能时：
		合并冲突分支：先在本地修改冲突，然后在提交：
		可以用git log --graph来查看分支合并图。

	分支合并策略：
		合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

			git merge --no-ff -m "merge with no-ff" dev
			git log --graph --pretty=oneline --abbrev-commit
		## master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

	Bug分支：
		每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。

	忙先切换：
		当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

		可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
			git stash
			git status

			git checkout master
			git checkout -b issue-101

			修改bug
			git add 
			git commit -m "fix bug 101"

			git checkout master
			git merge --no-ff -m "merged bug fix bug 101" issue-101
			git branch -d issue-101   习惯要好，用完删除

			git checkout dev
			git stash list
				方法一：
					git stash pop
				方法二：
					git stash apply
					git stash drop 

				多次stash
					用：git stash apply stash@{0}



	分支合并删除：
		如果要丢弃一个没有被合并过的分支，可以通过
			git branch -D <name>强行删除。



	多人协作：
		查看远程库信息：
		git remote

		git remote -v
		可以显示更详细的信息。

		从本地推送分支，使用
		git push origin branch-name，如果推送失败，先用
		git pull  抓取远程的新提交；
		远程库的名字就是 origin ，这是Git默认的叫法.后面跟分支名。把本地内容推送到远程分支。

		建立本地分支和远程分支的关联，使用
			git branch --set-upstream branch-name origin/branch-name；
			git pull
			git commit -m "gix env conflict"
			git push origin dev
		从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。





	rebase操作可以把本地未push的分叉提交历史整理成直线；



8、标签管理
		git branch
		git checkout master
		git tag v1.0
		git tag
	对某次提交打标签：
		git tag v0.9 commit_id

		git show v0.9
	带说明的标签：
		git tag -a v0.1 -m "version 0.1 released" commit_id
	删除标签：
		git tag -d v0.1
	
	

	


windows中比较两个版本问题的不同。FC 文件1 文件2

在linux中默认是：diff 文件1 文件2




问题1：
	Pushing to git@github.com:xwdreamer/FirstRepo_xuwei.git
	To git@github.com:xwdreamer/FirstRepo_xuwei.git
	 ! [rejected]        master -> master (non-fast-forward)
	error: failed to push some refs to 'git@github.com:xwdreamer/FirstRepo_xuwei.git'
	hint: Updates were rejected because the tip of your current branch is behind
	hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
	hint: before pushing again.
	hint: See the 'Note about fast-forwards' in 'git push --help' for details.
	原因：本地版本与在线版本不一致导致：
	解决方案：
		https://blog.csdn.net/shiren1118/article/details/7761203
		总结：一句话：[master][~/Downloads/ios] git push -u origin master -f 

	此种情况往往是因为：
		切换上传github的电脑导致的。所以每次切换地点的时候，
			在启用git之前，首先git pull 一下，拉取一下github上最新，保持同步，然后开始更新。

		所以：
			每次工作之后git push origin master
			每次工作之前git pull
27.0 分水岭算法watershed


---------------------------------------------------------------
				OpenCV学习(7) 分水岭算法(1)
	https://www.cnblogs.com/mikewolf2002/p/3304118.html
---------------------------------------------------------------
	分水岭算法主要用于图像分段，通常是把一副彩色图像灰度化，然后再求梯度图，最后在梯度图的基础上进行分水岭算法，求得分段图像的边缘线。

	下面左边的灰度图，可以描述为右边的地形图，地形的高度是由灰度图的灰度值决定，灰度为0对应地形图的地面，灰度值最大的像素对应地形图的最高点。

	可以编程实现灰度图的地形图显示，

	在真实图像中，由于噪声点或者其它干扰因素的存在，使用分水岭算法常常存在过度分割的现象，这是因为很多很小的局部极值点的存在，这样的分割效果是毫无用处的。
		为了解决过度分割的问题，可以使用基于标记(mark)图像的分水岭算法，就是通过先验知识，来指导分水岭算法，以便获得更好的图像分段效果。通常的mark图像，都是在某个区域定义了一些灰度层级，在这个区域的洪水淹没过程中，水平面都是从定义的高度开始的，这样可以避免一些很小的噪声极值区域的分割。





----------------------------------------------------
分水岭算法--watershed自动图像分割用法
https://blog.csdn.net/dcrmg/article/details/52498440
----------------------------------------------------

分水岭算法是一种图像区域分割法，在分割的过程中，它会把跟临近像素间的相似性作为重要的参考依据，从而将在空间位置上相近并且灰度值相近的像素点互相连接起来构成一个封闭的轮廓，

		封闭性  是分水岭算法的一个重要特征。

	其他图像分割方法，如 阈值， 边缘检测 等都不会考虑像素在空间关系上的相似性和封闭性这一概念，彼此像素间互相独立，没有统一性。

	分水岭算法较其他分割方法更具有思想性，更符合人眼对图像的印象。



	watershed( InputArray image, InputOutputArray markers );
		参数一：8bit3通道彩色图像矩阵序列
		参数二：markers包含不同区域的轮廓，每个轮廓有一个自己唯一的编号，
				轮廓的定位可以通过Opencv中findContours方法实现，这个是执行分水岭之前的要求。

		S1：算法会根据markers传入的轮廓作为种子（也就是所谓的注水点），
		S2：对图像上其他的像素点根据分水岭算法规则进行判断，
		S3：并对每个像素点的区域归属进行划定，直到处理完图像上所有像素点。
		S4：而区域与区域之间的分界处的值被置为“-1”，以做区分。

	经过灰度化、滤波、Canny边缘检测、findContours轮廓查找、轮廓绘制等步骤得到符合Opencv要求的merkers。

	每一个线条代表了一个种子，线条的不同灰度值其实代表了对不同注水种子的编号，有多少不同灰度值的线条，就有多少个种子，图像最后分割后就有多少个区域。

	watershed图像自动分割的实现步骤：

		1. 图像灰度化、滤波、Canny边缘检测

		2. 查找轮廓，并且把轮廓信息按照不同的编号绘制到watershed的第二个入参merkers上，相当于标记注水点。

		3. watershed分水岭运算

		4. 绘制分割出来的区域，视觉控还可以使用随机颜色填充，或者跟原始图像融合以下，以得到更好的显示效果。
	



